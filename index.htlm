<!DOCTYPE html>
<html lang="pt-br">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Click FPS Builder - PC Evolutivo</title>
    <link
        href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700;900&family=Exo+2:wght@300;400;600&display=swap"
        rel="stylesheet">
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: "Exo 2", sans-serif;
            background: linear-gradient(135deg, #0f0c29, #302b63, #24243e);
            color: #fff;
            min-height: 100vh;
            overflow-x: hidden;
            padding: 2px;
            position: relative;
        }

        body::before {
            content: "";
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: radial-gradient(circle at 10% 20%,
                    rgba(41, 128, 185, 0.15) 0%,
                    transparent 40%),
                radial-gradient(circle at 90% 80%,
                    rgba(46, 204, 113, 0.15) 0%,
                    transparent 40%);
            z-index: -1;
            pointer-events: none;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        header {
            text-align: center;
            margin-bottom: 30px;
            padding: 25px;
            background: rgba(10, 15, 35, 0.7);
            border-radius: 20px;
            border: 2px solid rgba(0, 180, 219, 0.4);
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.4);
            backdrop-filter: blur(8px);
            position: relative;
            overflow: hidden;
        }

        header::after {
            content: "";
            position: absolute;
            bottom: 0;
            left: 0;
            width: 100%;
            height: 5px;
            background: linear-gradient(90deg, #00dbde, #0083b0, #00b4db);
            background-size: 200% 200%;
            animation: gradientFlow 3s ease infinite;
        }

        h1 {
            font-family: "Orbitron", sans-serif;
            font-size: 3rem;
            margin-bottom: 15px;
            text-transform: uppercase;
            letter-spacing: 3px;
            text-shadow: 0 0 15px rgba(0, 180, 219, 0.8);
            background: linear-gradient(to right, #00dbde, #0083b0, #00b4db);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .subtitle {
            font-size: 1.3rem;
            color: #a0d2ff;
            max-width: 800px;
            margin: 0 auto;
            line-height: 1.6;
        }

        .stats {
            display: flex;
            justify-content: center;
            gap: 40px;
            margin: 30px 0;
            flex-wrap: wrap;
        }

        .stat-box {
            background: rgba(10, 25, 47, 0.8);
            padding: 20px 30px;
            border-radius: 15px;
            border: 2px solid rgba(0, 180, 219, 0.4);
            text-align: center;
            min-width: 220px;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.5);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            z-index: 2;
        }

        .stat-box:hover {
            transform: translateY(-8px);
            box-shadow: 0 12px 30px rgba(0, 0, 0, 0.7);
        }

        .stat-box h2 {
            font-size: 0.7rem;
            margin-bottom: 12px;
            color: #00b4db;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .stat-value {
            font-size: 2.4rem;
            font-weight: bold;
            color: #4cd137;
            text-shadow: 0 0 15px rgba(76, 209, 55, 0.6);
            font-family: "Orbitron", sans-serif;
        }

        .click-area {
            text-align: center;
            margin: 40px 0;
        }

        .click-pc {
            position: relative;
            display: inline-block;
            cursor: pointer;
            transition: transform 0.3s ease;
            margin-bottom: 20px;
        }

        .click-pc:hover {
            transform: scale(1.05);
        }

        .click-pc:active {
            transform: scale(0.98);
        }

        .pc-image {
            width: 320px;
            height: auto;
            filter: drop-shadow(0 15px 25px rgba(0, 0, 0, 0.7));
            transition: all 0.5s ease;
        }

        .click-info {
            margin-top: 15px;
            color: #a0d2ff;
        }

        .pc-info {
            background: rgba(10, 15, 35, 0.7);
            border-radius: 20px;
            padding: 30px;
            border: 2px solid rgba(0, 180, 219, 0.4);
            box-shadow: 0 12px 35px rgba(0, 0, 0, 0.4);
            backdrop-filter: blur(5px);
            margin: 50px auto;
            max-width: 800px;
        }

        .pc-info h2 {
            font-size: 2rem;
            margin-bottom: 25px;
            color: #00b4db;
            text-align: center;
            text-transform: uppercase;
            letter-spacing: 2px;
            font-family: "Orbitron", sans-serif;
        }

        .pc-specs {
            display: grid;
            grid-template-columns: 1fr;
            gap: 20px;
        }

        .spec-item {
            background: rgba(0, 10, 30, 0.6);
            padding: 18px 20px;
            border-radius: 12px;
            border-left: 5px solid #00b4db;
            transition: all 0.3s ease;
        }

        .spec-item:hover {
            background: rgba(0, 20, 50, 0.7);
            transform: translateX(10px);
        }

        .spec-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .spec-name {
            font-weight: bold;
            color: #00b4db;
            font-size: 1.3rem;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .spec-icon {
            font-size: 1.8rem;
        }

        .spec-level {
            background: rgba(0, 180, 219, 0.2);
            padding: 5px 15px;
            border-radius: 20px;
            font-weight: bold;
            color: #fbc531;
        }

        .spec-model {
            font-size: 1.2rem;
            color: #fbc531;
            margin-bottom: 15px;
            text-align: center;
        }

        .bonus-info {
            background: rgba(255, 159, 67, 0.2);
            padding: 10px;
            border-radius: 8px;
            margin-top: 10px;
            text-align: center;
            font-size: 0.9rem;
            color: #ffcf96;
        }

        .store-section {
            background: rgba(10, 15, 35, 0.7);
            border-radius: 20px;
            padding: 30px;
            border: 2px solid rgba(0, 180, 219, 0.4);
            box-shadow: 0 12px 35px rgba(0, 0, 0, 0.4);
            backdrop-filter: blur(5px);
            margin: 50px 0;
        }

        .store-section h2 {
            font-size: 2rem;
            margin-bottom: 30px;
            color: #00b4db;
            text-align: center;
            text-transform: uppercase;
            letter-spacing: 2px;
            font-family: "Orbitron", sans-serif;
        }

        .store-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 30px;
        }

        .store-item {
            background: rgba(0, 10, 30, 0.6);
            border-radius: 20px;
            padding: 25px;
            border: 1px solid rgba(0, 180, 219, 0.3);
            transition: all 0.4s ease;
            position: relative;
            overflow: hidden;
        }

        .store-item:hover {
            transform: translateY(-10px);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.5);
            border-color: #00b4db;
        }

        .store-item::before {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 5px;
            background: linear-gradient(90deg, #00b4db, #0083b0);
        }

        .item-header {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
        }

        .item-icon {
            width: 60px;
            height: 60px;
            margin-right: 20px;
            background: rgba(0, 0, 0, 0.4);
            border-radius: 15px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 2rem;
            color: #00b4db;
        }

        .item-title {
            font-size: 1.6rem;
            color: #00b4db;
            font-family: "Orbitron", sans-serif;
        }

        .item-model {
            font-size: 1.3rem;
            color: #fbc531;
            margin-bottom: 20px;
            text-align: center;
        }

        .requirements-large {
            font-size: 1.1rem;
            color: #a0d2ff;
            text-align: center;
            margin: 15px 0;
            font-style: italic;
        }

        .item-stats {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
        }

        .item-stat {
            text-align: center;
            flex: 1;
            padding: 10px;
            background: rgba(0, 0, 0, 0.3);
            border-radius: 10px;
        }

        .item-stat-label {
            font-size: 1rem;
            color: #9c9c9c;
            margin-bottom: 8px;
        }

        .item-stat-value {
            font-size: 1.4rem;
            font-weight: bold;
            color: #4cd137;
            font-family: "Orbitron", sans-serif;
        }

        .upgrade-button {
            width: 100%;
            padding: 15px;
            font-size: 1.3rem;
            background: linear-gradient(135deg, #00b4db, #0083b0);
            color: white;
            border: none;
            border-radius: 12px;
            cursor: pointer;
            font-weight: bold;
            text-transform: uppercase;
            letter-spacing: 1px;
            transition: all 0.3s ease;
            font-family: "Orbitron", sans-serif;
        }

        .upgrade-button:hover {
            background: linear-gradient(135deg, #00dbde, #0083b0);
            box-shadow: 0 0 20px rgba(0, 180, 219, 0.6);
        }

        .upgrade-button:disabled {
            background: linear-gradient(135deg, #555, #333);
            color: #777;
            cursor: not-allowed;
            box-shadow: none;
        }

        .notification {
            position: fixed;
            top: 30px;
            right: 30px;
            padding: 20px 30px;
            background: rgba(10, 25, 47, 0.95);
            border-radius: 15px;
            border-left: 5px solid #00b4db;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.5);
            transform: translateX(120%);
            transition: transform 0.6s ease;
            z-index: 1000;
            max-width: 400px;
        }

        .notification.show {
            transform: translateX(0);
        }

        .notification-title {
            font-size: 1.5rem;
            color: #00b4db;
            margin-bottom: 10px;
            font-family: "Orbitron", sans-serif;
        }

        .notification-content {
            font-size: 1.2rem;
            color: #fff;
        }

        .bonus-badge {
            background: linear-gradient(135deg, #ff9f43, #ff6b6b);
            color: white;
            padding: 5px 15px;
            border-radius: 20px;
            font-weight: bold;
            font-size: 0.9rem;
            margin-left: 10px;
        }

        @keyframes gradientFlow {
            0% {
                background-position: 0% 50%;
            }

            50% {
                background-position: 100% 50%;
            }

            100% {
                background-position: 0% 50%;
            }
        }

        @keyframes pulse {
            0% {
                transform: scale(1);
                filter: drop-shadow(0 0 0 rgba(0, 180, 219, 0));
            }

            50% {
                transform: scale(1.05);
                filter: drop-shadow(0 0 20px rgba(0, 180, 219, 0.8));
            }

            100% {
                transform: scale(1);
                filter: drop-shadow(0 0 0 rgba(0, 180, 219, 0));
            }
        }

        .pc-level {
            position: absolute;
            bottom: 10px;
            left: 0;
            right: 0;
            text-align: center;
            font-family: 'Orbitron', sans-serif;
            font-size: 1.2rem;
            color: #4cd137;
            text-shadow: 0 0 10px rgba(76, 209, 55, 0.8);
        }

        /* Responsividade */
        @media (max-width: 768px) {
            .stats {
                flex-wrap: nowrap;
                overflow-x: auto;
                justify-content: flex-start;
                padding: 10px 0;
            }

            .stat-box {
                min-width: 180px;
                padding: 15px;
            }

            h1 {
                font-size: 2.2rem;
            }

            .pc-image {
                width: 280px;
            }
        }

        @media (max-width: 480px) {
            .stat-box {
                min-width: 150px;
                padding: 10px;
            }

            .stat-value {
                font-size: 1.8rem;
            }

            .pc-image {
                width: 240px;
            }

            .store-grid {
                grid-template-columns: 1fr;
            }
        }

        /* força título e subtitle sem quebra */
        header h1,
        header .subtitle {
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        /* remove espaçamento lateral do header */
        header {
            padding: 15px 3px;
            /* 15px top/bottom, 3px left/right */
        }

        /* diminui um pouco as fontes para caber */
        header h1 {
            font-size: 1.2rem;
            /* ajuste conforme necessário */
            letter-spacing: 2px;
        }

        header .subtitle {
            font-size: 1rem;
            margin-top: 4px;
        }

        /* container geral com 3px de padding lateral */
        .container {
            padding: 20px 3px;
        }

        /* stats sempre em linha e com gap mínimo */
        .stats {
            display: flex !important;
            flex-wrap: nowrap !important;
            gap: 8px;
            margin: 20px 3px;
            /* 3px das laterais */
            overflow-x: auto;
            padding-bottom: 5px;
        }

        /* caixas menores, com largura suficiente para caber 3 */
        .stat-box {
            flex: 0 0 auto;
            min-width: 70px;
            /* valor mínimo pra caber as 3 */
            padding: 8px 10px;
            border-width: 1px;
            /* deixa mais fininho */
        }

        /* título interno e valor reduzidos */
        .stat-box h2 {
            font-size: 0.7rem;
            margin-bottom: 6px;
        }

        .stat-value {
            font-size: 1.4rem;
        }

        /* ajustes no clique para não invadir as bordas */
        .click-area {
            margin: 30px 3px;
        }

        .click-button {
            padding: 14px 30px;
            font-size: 1.4rem;
        }
    </style>
</head>

<body>
    <div class="container">
        <header>
            <h1>🚀 CLICK FPS BUILDER</h1>
            <p class="subtitle">
                Monte o PC gamer definitivo! Clique no PC para gerar FPS
            </p>
        </header>

        <div class="stats">
            <div class="stat-box">
                <h2>FPS Atuais</h2>
                <div class="stat-value" id="fps">0</div>
            </div>
            <div class="stat-box">
                <h2>FPS por Segundo</h2>
                <div class="stat-value" id="fpsps">0</div>
            </div>
            <div class="stat-box">
                <h2>FPS por Clique</h2>
                <div class="stat-value" id="fpspc">1</div>
            </div>
        </div>

        <div class="click-area">
            <div class="click-pc" onclick="clicar()">
                <img id="pc-image" class="pc-image" src="https://i.ibb.co/8LjsHDcq/CASE-removebg-preview.png" alt="PC Gamer">
                <div class="pc-level" id="pc-level">Nível: 0</div>
            </div>
            <p class="click-info">
                Cada clique gera <span id="fps-per-click">1</span> FPS! Atualize componentes para melhorar seu PC
            </p>
        </div>

        <div class="pc-info">
            <h2>BÔNUS DE NÍVEL</h2>
            <div class="pc-specs" id="pc-info">
                <!-- Especificações serão preenchidas via JavaScript -->
            </div>
        </div>

        <div class="store-section">
            <h2>LOJA DE COMPONENTES</h2>
            <div class="store-grid" id="store">
                <!-- Itens da loja serão preenchidos via JavaScript -->
            </div>
        </div>
    </div>

    <div class="notification" id="notification">
        <div class="notification-title">NÍVEL COMPRADO!</div>
        <div class="notification-content" id="notification-content">
            Componente atualizado com sucesso!
        </div>
    </div>

    <script>
        // Configurações do jogo
        let fps = 0;
        let fpsPorSegundo = 0;
        let fpsPorClique = 1;
        let pcLevel = 0;

        // Componentes do PC com custos em FPS
        const equipamentos = [
            {
                nome: "Processador",
                nivel: 0,
                incrementoBase: 0.05,
                modelos: ["Pentium", "i3", "i5", "i7", "i9"],
                custoBase: 15,
                icon: "🚀",
                desc: "O cérebro do seu PC, responsável por todos os cálculos",
            },
            {
                nome: "Placa-mãe",
                nivel: 0,
                incrementoBase: 0.03,
                modelos: ["H61", "B250", "B460", "Z590", "Z790"],
                custoBase: 10,
                icon: "🔌",
                desc: "Conecta todos os componentes do seu computador",
            },
            {
                nome: "Memória RAM",
                nivel: 0,
                incrementoBase: 0.04,
                modelos: [
                    "4GB DDR3",
                    "8GB DDR4",
                    "16GB DDR4",
                    "32GB DDR5",
                    "64GB DDR5",
                ],
                custoBase: 8,
                icon: "💾",
                desc: "Armazenamento temporário para melhor desempenho",
            },
            {
                nome: "HD",
                nivel: 0,
                incrementoBase: 0.02,
                modelos: [
                    "500GB",
                    "1TB",
                    "SSD 240GB",
                    "SSD NVMe 500GB",
                    "SSD NVMe 1TB",
                ],
                custoBase: 7,
                icon: "💽",
                desc: "Armazenamento permanente de arquivos e programas",
            },
            {
                nome: "Placa de Vídeo",
                nivel: 0,
                incrementoBase: 0.1,
                modelos: ["GT 610", "GTX 1050Ti", "GTX 1660", "RTX 3060", "RTX 4090"],
                custoBase: 25,
                icon: "🎮",
                desc: "Responsável pelo processamento gráfico do jogo",
            },
            {
                nome: "Fonte",
                nivel: 0,
                incrementoBase: 0.01,
                modelos: ["300W", "400W", "500W", "650W", "750W"],
                custoBase: 5,
                icon: "🔋",
                desc: "Fornece energia para todos os componentes do PC",
            },
        ];

        // Elementos DOM
        const fpsElement = document.getElementById("fps");
        const fpspsElement = document.getElementById("fpsps");
        const fpspcElement = document.getElementById("fpspc");
        const fpsPerClickElement = document.getElementById("fps-per-click");
        const storeElement = document.getElementById("store");
        const pcInfoElement = document.getElementById("pc-info");
        const notification = document.getElementById("notification");
        const notificationContent = document.getElementById("notification-content");
        const pcImage = document.getElementById("pc-image");
        const pcLevelElement = document.getElementById("pc-level");

        // Função para calcular o custo do próximo nível
        function calcularCustoProximoNivel(item) {
            return Math.floor(item.custoBase * Math.pow(1.15, item.nivel));
        }

        // Função para calcular o FPS por segundo
        function calcularFpsPorSegundo() {
            let total = 0;
            equipamentos.forEach((item) => {
                total += item.incrementoBase * item.nivel;
            });
            return total;
        }

        // Função para calcular o bônus de clique
        function calcularBonusClique() {
            let bonus = 0;

            // Verificar se todos os componentes estão pelo menos no nível 20
            const todosNoNivel20 = equipamentos.every((item) => item.nivel >= 20);

            if (todosNoNivel20) {
                // Cada componente adiciona exatamente 1 FPS por clique
                equipamentos.forEach((item) => {
                    bonus += 1;
                });
            }

            return bonus;
        }

        // Função para clicar e ganhar FPS
        function clicar() {
            fps += fpsPorClique;

            // Animar o PC ao clicar
            pcImage.style.animation = "pulse 0.5s ease";
            setTimeout(() => {
                pcImage.style.animation = "";
            }, 500);

            atualizar();
        }

        // Função para comprar nível
        function comprarNivel(index) {
            const item = equipamentos[index];
            const custo = calcularCustoProximoNivel(item);

            if (fps >= custo) {
                fps -= custo;
                item.nivel++;

                // Atualizar FPS/s
                fpsPorSegundo = calcularFpsPorSegundo();

                // Verificar bônus de clique
                const novoBonus = calcularBonusClique();
                fpsPorClique = 1 + novoBonus;

                // Calcular nível médio do PC
                pcLevel = calcularNivelMedio();

                // Atualizar imagem do PC
                atualizarImagemPC();

                // Mostrar notificação
                showNotification(
                    `${item.nome} Nível ${item.nivel}`,
                    `Custo: ${custo} FPS`
                );

                atualizar();
            } else {
                showNotification(
                    "FPS Insuficientes",
                    `Você precisa de mais ${custo - fps} FPS para comprar o próximo nível`
                );
            }
        }

        // Obter modelo atual do componente
        function obterModelo(item) {
            if (item.nivel < 10) return item.modelos[0];
            if (item.nivel < 20) return item.modelos[1];
            if (item.nivel < 40) return item.modelos[2];
            if (item.nivel < 60) return item.modelos[3];
            return item.modelos[4];
        }

        // Calcular nível médio do PC
        function calcularNivelMedio() {
            let total = 0;
            equipamentos.forEach(item => {
                total += item.nivel;
            });
            return Math.floor(total / equipamentos.length);
        }

        // Atualizar imagem do PC baseado no nível médio
        function atualizarImagemPC() {
            if (pcLevel >= 40) {
                pcImage.src = "https://i.ibb.co/3sT1mJw/pc-3.png";
            } else if (pcLevel >= 20) {
                pcImage.src = "https://i.ibb.co/0Fw2Tvz/pc-2.png";
            } else if (pcLevel >= 10) {
                pcImage.src = "https://i.ibb.co/0XkQvV3/pc-base.png";
            } else {
                pcImage.src = "https://i.ibb.co/8LjsHDcq/CASE-removebg-preview.png";
            }

            pcLevelElement.textContent = `Nível: ${pcLevel}`;
        }

        // Mostrar notificação
        function showNotification(title, content) {
            notification.querySelector(".notification-title").textContent = title;
            notificationContent.textContent = content;
            notification.classList.add("show");

            setTimeout(() => {
                notification.classList.remove("show");
            }, 3500);
        }

        // Atualizar visual das especificações
        function atualizarPC() {
            let html = "";

            equipamentos.forEach((eq) => {
                const modelo = obterModelo(eq);
                const bonusNivel = Math.floor(eq.nivel / 20);

                html += `
        <div class="spec-item">
          <div class="spec-header">
            <div class="spec-name">
              <span class="spec-icon">${eq.icon}</span>
              ${eq.nome}
            </div>
            <div class="spec-level">Nível ${eq.nivel}</div>
          </div>
          
          <div class="spec-model">${modelo}</div>
          
          <div class="bonus-info">
            Contribuição para FPS/clique: ${eq.nivel >= 20 ? "+1" : "0"}
          </div>
        </div>
      `;
            });

            // Adicionar status do bônus total
            const bonusTotal = calcularBonusClique();
            html += `
      <div class="spec-item" style="background: rgba(76, 209, 55, 0.1);">
        <div class="spec-header">
          <div class="spec-name">
            <span class="spec-icon">⭐</span>
            BÔNUS TOTAL
          </div>
        </div>
        
        <div class="spec-model" style="font-size: 1.4rem; color: #4cd137;">
          ${bonusTotal > 0
                    ? `+${bonusTotal} FPS por clique`
                    : "Nenhum bônus ativo"
                }
        </div>
        
        <div class="bonus-info">
          ${bonusTotal > 0
                    ? "Todos os componentes estão no nível 20 ou superior!"
                    : "Atinja nível 20 em todos os componentes para desbloquear bônus"
                }
        </div>
      </div>
    `;

            pcInfoElement.innerHTML = html;
        }

        // Atualizar toda a interface
        function atualizar() {
            fpsElement.textContent = Math.floor(fps);
            fpspsElement.textContent = fpsPorSegundo.toFixed(1);
            fpspcElement.textContent = fpsPorClique;
            fpsPerClickElement.textContent = fpsPorClique;

            // Atualizar loja
            storeElement.innerHTML = "";

            equipamentos.forEach((item, i) => {
                const modelo = obterModelo(item);
                const custo = calcularCustoProximoNivel(item);

                const podeComprar = fps >= custo;
                const bonusNivel = item.nivel >= 20 ? 1 : 0;

                const div = document.createElement("div");
                div.className = "store-item";
                div.innerHTML = `
        <div class="item-header">
          <div class="item-icon">${item.icon}</div>
          <div class="item-title">${item.nome
                    } <span class="bonus-badge">Nível ${item.nivel}</span></div>
        </div>
        <div class="item-model">${modelo}</div>
        
        <div class="item-stats">
          <div class="item-stat">
            <div class="item-stat-label">FPS/s</div>
            <div class="item-stat-value">+${(
                        item.incrementoBase * item.nivel
                    ).toFixed(2)}</div>
          </div>
          <div class="item-stat">
            <div class="item-stat-label">Bônus Clique</div>
            <div class="item-stat-value">${item.nivel >= 20 ? "+1" : "0"
                    }</div>
          </div>
          <div class="item-stat">
            <div class="item-stat-label">Próximo Nível</div>
            <div class="item-stat-value">${custo} FPS</div>
          </div>
        </div>
        
        <div style="margin: 15px 0; font-size: 0.9rem; color: #a0d2ff; text-align: center;">
          ${item.desc}
        </div>
        
        <button class="upgrade-button" onclick="comprarNivel(${i})" ${item.nivel >= 500 ? "disabled" : ""
                    }>
          ${item.nivel < 500
                        ? `Comprar Nível ${item.nivel + 1} - ${custo} FPS`
                        : "Nível Máximo (500)"
                    }
        </button>
      `;
                storeElement.appendChild(div);
            });

            atualizarPC();
        }

        // Atualização automática de FPS por segundo
        setInterval(() => {
            fps += fpsPorSegundo;
            atualizar();
        }, 1000);

        // Inicializar o jogo
        function iniciarJogo() {
            fpsPorSegundo = calcularFpsPorSegundo();
            pcLevel = calcularNivelMedio();
            atualizarImagemPC();
            atualizar();
        }

        // Iniciar o jogo
        iniciarJogo();
    </script>
</body>

</html>
